; procedure.asm
.386
.MODEL FLAT
.CODE
@PROCESSING@8 PROC ; Размер всех входных операндов - 8 байт
    PUSH ECX       ; Сохраним в стек изначалное значение ррегистра, т.к. он будет изменяться

    MOV ESI, EAX ; копируем указатель на начало строки
    PUSH EAX     ; сохраним указатель на оригинальную строку в стек

    XOR EAX, EAX     ; обнуляем регистр, в нем будем хранить длину исходной строки
    line_length:     ; считаем длину исходной строки
        MOV AL, [ESI]  ; извлекаем символ строки для проверки
        CMP AL, 0      ; проверка на конец строки
        JE next        ; если достигли конца строки, то выходим из цикла
        INC AH         ; увеличиваем счетчик длины строки на единицу
        INC ESI        ; переход к следующему символу
        LOOP line_length

    next:
    MOV DH, AH
    ; в момент данного участка кода
    ; в регистре DH хранится длина исходнйо строки,
    ; а в DL - количество необходимых повторений 

    ; в строке 7 мы сохрранили указатель на оригинальную 
    ; строку в стек, сейчас возвращаем назад
    POP EAX

    ; в регистр EDI помещаем указатль на место, куда 
    ; вставлять допоплнительные строки
    MOV EDI, ESI
    ; в ррегистре ESI - указатель на оригинальную строку
    ; такие значениея ESI и EDI нужны для функции MOVSB
    MOV ESI, EAX

    ; обнуляем регистр ECX для счетчика цикла
    XOR ECX, ECX
    ; DL - количество повторений исходной строки
    MOV CL, DL

    ; основной цикл добавления в конец строки, 
    ; за одну итерацию добавляется полностью еще одна исходная строка
    cycle:
        ; сохраняем значение ECX, так как функция REP использует этот регистр
        PUSH ECX    
        ; добалвеям в CL длину строки, именно столько символов
        ; функция REP MOVSB скопирует из ESI в EDI
        MOV CL, DH
        ; копирование из ESI в EDI
        REP MOVSB
        ; возвращаем в ECX счетчик основного цикла
        POP ECX
        LOOP cycle
    
    ; добавляем нуль-символ в конец строки
    XOR ECX, ECX
    mov [ESI], ECX

    ; восстанавливаем значения регистров
    MOVZX EDX, DL
    POP ECX
; RET указываем без аргументов, так как не передавали параметры через стек 
RET 
@PROCESSING@8 ENDP
END